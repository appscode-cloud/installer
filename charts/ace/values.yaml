# Default values for ace.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

platform-ui:
  enabled: false

cluster-ui:
  enabled: false

grafana:
  enabled: false

kubedb-ui:
  enabled: false

platform-api:
  enabled: false

ingress-nginx:
  enabled: false
  # controller:
  #   ingressClassByName: true
  #   ingressClassResource:
  #     enabled: true
  #     name: nginx-ace
  #     controllerValue: "k8s.io/nginx-ace"

ingress-dns:
  enabled: false

nats:
  enabled: false
  ## configured in lib-selfhost
  # securityContext: # +doc-gen:break
  #   fsGroup: 65534
  #   runAsGroup: 65534
  #   runAsNonRoot: true
  #   runAsUser: 65534
  #   seccompProfile:
  #     type: RuntimeDefault

nats-dns:
  enabled: false

trickster:
  enabled: false
  ## configured in lib-selfhost
  # sidecars:
  #   spec:
  #     auth:
  #       securityContext: # +doc-gen:break
  #         allowPrivilegeEscalation: false
  #         capabilities:
  #           drop:
  #           - ALL
  #         privileged: false
  #         readOnlyRootFilesystem: true
  #         runAsGroup: 65534
  #         runAsNonRoot: true
  #         runAsUser: 65534
  #         seccompProfile:
  #           type: RuntimeDefault

s3proxy:
  enabled: false

openfga:
  enabled: false
  datastoreURI: ""
  ## configured in lib-selfhost
  # securityContext: # +doc-gen:break
  #   allowPrivilegeEscalation: false
  #   capabilities:
  #     drop:
  #     - ALL
  #   privileged: false
  #   readOnlyRootFilesystem: true
  #   runAsGroup: 65534
  #   runAsNonRoot: true
  #   runAsUser: 65534
  #   seccompProfile:
  #     type: RuntimeDefault

pgoutbox:
  enabled: false

outbox-syncer:
  enabled: false

# -------------

global:
  nameOverride: "ace"
  fullnameOverride: ""

  platform:
    host: appscode.ninja
    hostType: domain
    deploymentType: CloudDemo
    ownerID: 0
    ownerName: ""

  # License for the product.
  # Example:
  # helm install appscode/ace \
  #   --set-file global.license=/path/to/license/file
  # or
  # helm install appscode/ace \
  #   --set global.license=<license file content>
  license: ""

  # Docker registry used to pull app related images
  registry: ""

  # Docker registry fqdn used to pull app related images.
  # Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
  registryFQDN: ghcr.io

  # Specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  #
  # Example:
  # helm template charts/ace \
  #   --set global.imagePullSecrets[0].name=sec0 \
  #   --set global.imagePullSecrets[1].name=sec1
  imagePullSecrets: []

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  monitoring:
    # Name of monitoring agent (eg "prometheus.io/operator")
    agent: ""
    serviceMonitor:
      # Specify the labels for ServiceMonitor.
      # Prometheus crd will select ServiceMonitor using these labels.
      # Only usable when monitoring agent is `prometheus.io/operator`.
      labels: {}
    exporter:
      resources:
        requests:
          # cpu: 100m
          memory: 128Mi

  infra:
    storageClass:
      name: "standard"
    tls:
      issuer: "ca" # ca,letsencrypt,letsencrypt-staging,external
      ca:
        cert: ""
        key: ""
      acme:
        email: ops@appscode.com
        solver: Ingress
        gatewayName: backend
      certificate:
        cert: ""
        key: ""
      jks:
        keystore:
        truststore:
        password: ""
    dns:
      targetIPs: []
      provider: "external" # external,cloudflare,route53,cloudDNS
      auth: {}
        # cloudflare:
          # token: xyz
        # cloudDNS:
          # GOOGLE_PROJECT_ID: "project-id"
          # GOOGLE_SERVICE_ACCOUNT_JSON_KEY: xyz
        # azureDNS:
          # subscriptionID: "azure-subscription-id"
          # tenantID: "azure-tenant-id"
          # resourceGroupName: "resource-group-name"
          # hostedZoneName: "zone-name-for-hosted-domain"
          # servicePrincipalAppID: "service-principal-id"
          # servicePrincipalAppPassword: "service-principal-app"
          # environment: AzurePublicCloud
        # route53:
          # AWS_ACCESS_KEY_ID: "access-id"
          # AWS_SECRET_ACCESS_KEY: "secret-key"
          # AWS_REGION: "us-east-1"
    # KMS and Object Store services are required
    # set provider to empty to disable this feature
    objstore:
      provider: "" # s3,azure,gcs,swift
      # might be a file storage prefixed with file://
      bucket: gs://ace-data
      mountPath: /data/credentials
      # gcs:
      #   spec:
      #     bucket: stash-backup
      #     prefix: /demo/deployment/my-deploy
      #   auth:
      #     GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ""
      #     GOOGLE_PROJECT_ID: "" # optional

    kubestash:
      schedule: "0 */2 * * *"
      storageRef:
        name: default
        namespace: ""
      retentionPolicy:
        name: "keep-1mo"
        namespace: ""
      encryptionSecret:
        name: default-encryption-secret
        namespace: ""
      storageSecret:
        create: true

    kms:
      # location where the secret key resides
      masterKeyURL: ""
      # ref: https://gocloud.dev/howto/secrets/#local
      # the URL hostname must be a base64-encoded key, of length 32 bytes when decoded.
      # masterKeyURL: base64key://smGbjm71Nxd1Ig5FS0wj9SlbzAIrnolCz9bQQ6uAhl4=
      # provider: "Google"
      # masterKeyURL: gcpkms://projects/
    kubepack:
      bucket: ""
      prefix: ""
    badger:
      mountPath: /badger
      levels: 7
    invoice:
      mountPath: /billing
      bucket: gs://invoice-storage-demo
      prefix: ""
      trackerEmail: invoice-tracker@appscode.com
    fileserver:
      baseURL: ""
      # bucket to store installer and kubepack yamls
      bucket: ""
      prefix: ""

settings:
  db:
    version: "16.4"
    databaseName: bb
    deletionPolicy: Delete
    persistence:
      size: 10Gi
    resources:
      limits:
        # cpu: "1"
        memory: 2Gi
    auth:
      username: postgres
      password: "xyz"
    logSQL: false
  cache:
    version: "7.2.4"
    cacheInterval: 60
    persistence:
      size: 10Gi
    resources:
      limits:
        # cpu: "1"
        memory: 2Gi
    auth:
      username: root
      password: "xyz"
    deletionPolicy: Delete
  # Mail service
  smtp:
    # mailerServiceType: smtp
    enabled: false
    host: smtp.mailgun.org:465
    tlsEnabled: false
    from: no-reply@example.com
    username: apikey
    password: xyz
    subjectPrefix: ACE
    sendAsPlainText: false
  # NATS credentials
  nats:
    shardCount: 16
    replicas: 1
    mountPath: /nats/creds
    operatorCreds: 'xyz'
    operatorJwt: 'xyz'
    systemCreds: 'xyz'
    systemJwt: 'xyz'
    systemPubKey: 'xyz'
    systemUserCreds: 'xyz'
    adminCreds: 'xyz'
    adminUserCreds: 'xyz'
  # openfga server
  openfga:
    apiURL: ""
    preSharedKey: ""

  ######## settings:
  platform:
    appName: 'ACE: Cloud Native Data Platform'
    # one of "GA", "BETA", "ALPHA", "DEV"
    runMode: 'GA'

    ## Force every new repository to be private.
    ##
    forcePrivate: false

    ## Indicates whether or not to disable Git clone through HTTP/HTTPS. When
    ## disabled, users can only perform Git operations via SSH.
    ##
    disableHttpGit: false

    ## Lock the path /install to configure b3
    ##
    installLock: true

    ## Indicates whether or not to enable repository file upload feature.
    ##
    repositoryUploadEnabled: true

    ## File types that are allowed to be uploaded, e.g. image/jpeg|image/png.
    ## Leave empty means allow any file typ
    ##
    repositoryUploadAllowedTypes:

    ## Maximum size of each file in MB.
    ##
    repositoryUploadMaxFileSize: 3

    ## Maximum number of files per upload.
    ##
    repositoryUploadMaxFiles: 5

    ## Enable this to use captcha validation for registration.
    ##
    serviceEnableCaptcha: true

    ## Users need to confirm e-mail for registration
    ##
    serviceRegisterEmailConfirm: true

    ## Weather or not to allow users to register.
    ##
    serviceDisableRegistration: false

    ## Weather or not sign in is required to view anything.
    ##
    serviceRequireSignInView: false

    ## Mail notification
    ##
    serviceEnableNotifyMail: true

    ## To create an account, email should belong to this domain list
    ##
    serviceDomainWhiteList: []

    cookieName: i_like_ace

    ## Landing page for non-logged users, can be "home" or "explore"
    ##
    serverLandingPage: home

    ## Can be "console" and "file", default is "console"
    ## Use comma to separate multiple modes, e.g. "console, file"
    ##
    logMode: console

    ## Either "Trace", "Info", "Warn", "Error", "Fatal", default is "Trace"
    ##
    logLevel: Info

    ## Undocumented, but you can take a guess.
    ##
    otherShowFooterBranding: false

    ## Show version information about Gogs and Go in the footer
    ##
    otherShowFooterVersion: true

    ## Show time of template execution in the footer
    ##
    otherShowFooterTemplateLoadTime: true

    # csrf cookie http only enable
    enableCSRFCookieHttpOnly: false

    # logged in username
    cookieUsername: ace_awesome

    # to auto sign in
    cookieRememberName: ace_incredible

    # This URL will be used to forward users to a third-party login page
    loginURL: ""

    # redirect url after logout
    logoutURL: ""

  grafana:
    # possible values : production, development
    appMode: production
    secretKey: 4nHrUDNw00AjlhAq8hCGYPxBt6I1UCbmdC5ReY19IPWdy8qFDzTZzXkdCr5d6qwP

  inboxServer:
    jmapURL: ""
    webAdminURL: ""
    emailDomain: ""
    adminJWTPrivateKey: ""

  security:
    oauth2JWTSecret: ""
    csrfSecretKey: ""

  contract:
    bucket: ""
    prefix: ""
    licenseBucket: ""

  firebase:
    project: ""
    database: ""

  # marketplace:
  #   alertEmails: ""
  #   spreadsheetID: ""
  #   spreadsheetCredential: ""
  #   spreadsheetCredentialMountPath: ""
  #   aws:
  #     secret: ""
  #     productCode: ""
  #   azure:
  #     secret: ""
  #     tenantID: ""
  #     clientID: ""
  #     clientSecret: ""
  #     clientSecretExpiresAt: ""
  #   gcp:
  #     secret: ""
  #     testUploadID: ""

# Docker registry containing app image
image:
  # Docker registry used to pull app container image
  registry: appscode
  # App container image
  repository: b3
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: Always

# Docker registry containing kubectl image
kubectl:
  # Docker registry used to pull app container image
  registry: appscode
  # App container image
  repository: kubectl-nonroot
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.31"
  pullPolicy: Always

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: # +doc-gen:break
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  seccompProfile:
    type: RuntimeDefault

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

branding:
  logo: ""
  favicon: ""
  primaryColor: ""
  showAppTag: false
  appName: ""

cloudProviderOptions:
  aws: {}

setupJob:
  # https://github.com/fluxcd/flux2/discussions/1085#discussioncomment-473271
  # https://github.com/helm/helm/issues/9027#issuecomment-1908032461
  hook:
    enable: false
    hook: "post-install, post-upgrade, post-rollback, post-delete"
    hookWeight: "-5"
    hookDeletePolicy: "before-hook-creation"
  annotations: {}
  ttlSecondsAfterFinished: -1
  config:
    admin:
      username: admin
      password: secr3t
      email: admin@example.com
      displayName: "Ace Admin"
      orgname: ""
    # controls the self management of the ace cluster
    selfManagement:
      createCAPICluster: false
      import: true
      targetIPs:
      enableFeatures: []
      disableFeatures: []

extraObjects: {}

# List of sources to populate environment variables in the container
envFrom: []
# List of environment variables to set in the container
env: []
