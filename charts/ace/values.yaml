# Default values for ace.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

billing:
  enabled: true

platform-ui:
  enabled: true

accounts-ui:
  enabled: true

cluster-ui:
  enabled: true

deploy-ui:
  enabled: true

grafana:
  enabled: true

kubedb-ui:
  enabled: true

marketplace-ui:
  enabled: true

platform-api:
  enabled: true

prom-proxy:
  enabled: true

nats:
  enabled: true

reloader:
  enabled: true

ingress-nginx:
  enabled: true
  controller:
    ingressClassByName: true
    ingressClassResource:
      enabled: true
      name: nginx-ace
      controllerValue: "k8s.io/nginx-ace"

external-dns:
  enabled: true

# -------------
nameOverride: ""
fullnameOverride: ""

global:
  # License for the product.
  # Example:
  # helm install appscode/ace \
  #   --set-file global.license=/path/to/license/file
  # or
  # helm install appscode/ace \
  #   --set global.license=<license file content>
  license: ""

  # Docker registry used to pull app related images
  registry: ""

  # Docker registry fqdn used to pull app related images.
  # Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
  registryFQDN: ""

  # Specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  #
  # Example:
  # helm template charts/ace \
  #   --set global.imagePullSecrets[0].name=sec0 \
  #   --set global.imagePullSecrets[1].name=sec1
  imagePullSecrets: []

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  monitoring:
    # Name of monitoring agent (eg "prometheus.io/operator")
    agent: ""
    serviceMonitor:
      # Specify the labels for ServiceMonitor.
      # Prometheus crd will select ServiceMonitor using these labels.
      # Only usable when monitoring agent is `prometheus.io/operator`.
      labels: {}
    exporter:
      resources:
        requests:
          cpu: 100m
          memory: 128Mi

  infra:
    storageClass:
      name: "standard"
    tls:
      acmeServer: https://acme-staging-v02.api.letsencrypt.org/directory
      # acmeServer: https://acme-v02.api.letsencrypt.org/directory
      email: ops@appscode.com
    dns:
      provider: "Cloudflare"
      auth:
        email: ops@appscode.com
        token: xyz
    # KMS and Object Store services are required
    # set provider to empty to disable this feature
    objstore:
      host:
      bucket:
      provider: Google
      # credential : /data/credentials/sa.json
      mountPath: /data/credentials
      auth:
        serviceAccountJson: "xyz"
    kms:
      # location where the secret key resides
      provider: ""
      mountPath: ""
      masterKeyURL: ""
      # ref: https://gocloud.dev/howto/secrets/#local
      # the URL hostname must be a base64-encoded key, of length 32 bytes when decoded.
      # masterKeyURL: base64key://smGbjm71Nxd1Ig5FS0wj9SlbzAIrnolCz9bQQ6uAhl4=
      # provider: "Google"
      # masterKeyURL: gcpkms://projects/
    badger:
      mountPath: /badger
      levels: 7
    invoice:
      mountPath: /billing
      # host: https://console.cloud.google.com/storage/browser/invoice-storage-demo
      bucket: gs://invoice-storage-demo
      trackerEmail: invoice-tracker@appscode.com

settings:
  db:
    version: "13.2"
    databaseName: bb
    terminationPolicy: Delete
    persistence:
      size: 100Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
    auth:
      username: postgres
      password: "xyz"
  cache:
    version: "6.0.6"
    terminationPolicy: Delete
    persistence:
      size: 10Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
    auth:
      username: root
      password: "xyz"
  # Mail service
  smtp:
    # enableMailerService: true
    # mailerServiceType: smtp
    host: smtp.mailgun.org:465
    tlsEnabled: false
    from: no-reply@example.com
    username: apikey
    password: xyz
    subjectPrefix: ACE
    sendAsPlainText: false
  # NATS credentials
  nats:
    shardCount: 128
    mountPath: /nats/creds
    operatorCreds: 'xyz'
    operatorJwt: 'xyz'
    systemCreds: 'xyz'
    systemJwt: 'xyz'
    systemPubKey: 'xyz'
    systemUserCreds: 'xyz'
    adminCreds: 'xyz'
    adminUserCreds: 'xyz'
  platform:
    domain: appscode.ninja

    ######## settings___oiginal:
    appName: 'ACE: Kubernetes Native Data Platform'
    ## Either "dev", "prod" or "test".
    runMode: 'prod'

    experimentalFeatures: false

    ## Force every new repository to be private.
    ##
    forcePrivate: false

    ## Indicates whether or not to disable Git clone through HTTP/HTTPS. When
    ## disabled, users can only perform Git operations via SSH.
    ##
    disableHttpGit: false

    ## Lock the path /install to configure gitea
    ##
    installLock: true

    ## Indicates whether or not to enable repository file upload feature.
    ##
    repositoryUploadEnabled: true

    ## File types that are allowed to be uploaded, e.g. image/jpeg|image/png.
    ## Leave empty means allow any file typ
    ##
    repositoryUploadAllowedTypes:

    ## Maximum size of each file in MB.
    ##
    repositoryUploadMaxFileSize: 3

    ## Maximum number of files per upload.
    ##
    repositoryUploadMaxFiles: 5

    ## Enable this to use captcha validation for registration.
    ##
    serviceEnableCaptcha: true

    ## Users need to confirm e-mail for registration
    ##
    serviceRegisterEmailConfirm: true

    ## Weather or not to allow users to register.
    ##
    serviceDisableRegistration: false

    ## Weather or not sign in is required to view anything.
    ##
    serviceRequireSignInView: false

    ## Mail notification
    ##
    serviceEnableNotifyMail: true

    sessionProvider: redis

    sessionProviderConfig:
    # sessionProviderConfig: network=tcp,addr=gitea-cache.byte:6379,db=0,pool_size=100,idle_timeout=180,prefix=session
    cookieName: i_like_bytebuilders
    ## Either "memory", "redis", or "memcache", default is "memory"
    ##
    cacheAdapter: redis

    ## For "memory" only, GC interval in seconds, default is 60
    ##
    cacheInterval: 60

    ## For "redis" and "memcache", connection host address
    ## redis: network=tcp,addr=:6379,password=xyz,db=0,pool_size=100,idle_timeout=180
    ## memcache: `127.0.0.1:11211`
    ##
    cacheHost:
    # cacheHost: network=tcp,addr=gitea-cache.byte:6379,db=1,pool_size=100,idle_timeout=180,prefix=cache

    cachePassword:

    ## Landing page for non-logged users, can be "home" or "explore"
    ##
    serverLandingPage: home

    ## Either "mysql", "postgres" or "sqlite3", you can connect to TiDB with
    ## MySQL protocol.  Default is to use the postgresql configuration included
    ## with this chart.
    ##
    databaseType: postgres

    ## Database host.  Unused unless `postgresql.install` is false.
    ##
    databaseHost:
    # databaseHost: bytebuilders-db.byte:5432

    ## Database user.  Unused unless `postgresql.install` is false.
    ##
    databaseUser: postgres

    ## Database password.  Unused unless `postgresql.install` is false.
    ##
    databasePassword:

    ## Database password.  Unused unless `postgresql.install` is false.
    ##
    databaseName: bb

    ## Hook task queue length, increase if webhook shooting starts hanging
    ##
    webhookQueueLength: 1000

    ## Deliver timeout in seconds
    ##
    webhookDeliverTimeout: 5

    ## Allow insecure certification
    ##
    webhookSkipTlsVerify: true

    ## Number of history information in each page
    ##
    webhookPagingNum: 10

    ## Can be "console" and "file", default is "console"
    ## Use comma to separate multiple modes, e.g. "console, file"
    ##
    logMode: console

    ## Either "Trace", "Info", "Warn", "Error", "Fatal", default is "Trace"
    ##
    logLevel: Info

    ## Undocumented, but you can take a guess.
    ##
    otherShowFooterBranding: false

    ## Show version information about Gogs and Go in the footer
    ##
    otherShowFooterVersion: true

    ## Show time of template execution in the footer
    ##
    otherShowFooterTemplateLoadTime: true

    ## Change this value for your installation.
    ##
    securitySecretKey: "changeme"

    ## Number of repositories that are showed in one explore page
    ##
    uiExplorePagingNum: 20

    ## Number of issues that are showed in one page
    ##
    uiIssuePagingNum: 10

    ## Number of maximum commits showed in one activity feed.
    ## NOTE: This value is also used in how many commits a webhook will send.
    ##
    uiFeedMaxCommitNum: 5

    ## Enable running cron tasks periodically.
    ##
    cronEnabled: true

    ## Run cron tasks when Gogs starts.
    ##
    cronRunAtStart: false

    ## Cron syntax for scheduling update mirrors, e.g. @every 1h.
    ##
    cronUpdateMirrorsSchedule: '@every 10m'

    ## Cron syntax for scheduling repository health check, e.g. @every 24h.
    ##
    cronRepoHealthCheckSchedule: '@every 24h'

    ## Time duration syntax for health check execution timeout, e.g. 60s.
    ##
    cronRepoHealthCheckTimeout: 60s

    ## Arguments for command git fsck, e.g. --unreachable --tags.
    ##
    cronRepoHealthCheckArgs:

    ## Enable this to run repository statistics check at start time.
    ##
    cronCheckRepoStatsRunAtStart: true

    ## Cron syntax for scheduling repository statistics check, e.g. @every 24h.
    ##
    cronCheckRepoStatsSchedule: '@every 24h'

    ## Enable this to run repository archives cleanup at start time.
    ##
    cronRepoArchiveCleanupRunAtStart: false

    ## Cron syntax for scheduling repository statistics check, e.g. @every 24h.
    ##
    cronRepoArchiveCleanupSchedule: '@every 24h'

    ## Time duration to check if archive should be cleaned, e.g. 24h
    ##
    cronRepoArchiveCleanupOlderThan: 24h

    # csrf cookie http only enable
    enableCSRFCookieHttpOnly: false

  stripe:
    # stripe access token
    stripeKey: sk_
    # webhook signing secret
    endpointSecret: wh

  searchlight:
    enabled: true
    alertmanagerAddr: http://alertmanager.m3db.svc:8443
    queryAddr: http://m3query.m3db.svc:7201
    rulerAddr: http://ruler.m3db.svc:8443
    m3coordinatorAddr: http://m3coordinator.m3db.svc:7201

  grafana:
    # possible values : production, development
    appMode: production

    sessionProvider: redis
    sessionProviderConfig:
    # sessionProviderConfig: addr=gitea-cache.byte:6379,db=0,pool_size=100

    cacheAdapter: redis
    cacheInterval: 60
    cacheHost:
    # cacheHost: addr=bytebuilders-cache.byte:6379,db=1,pool_size=100

    skipMigrations: true

# postgresql:
#   install: false
#   postgresUser: xyz
#   postgresPassword: xyz
#   postgresDatabase: xyz
#   persistence:
#     enabled: false

# Docker registry containing app images
image:
  # Docker registry used to pull app container image
  registry: appscode
  # App container image
  repository: gitea
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: Always

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
