{{- $infra := .Values.global.infra -}}

{{- $mountCACerts := or
  (has $infra.tls.issuer (list "ca" "letsencrypt-staging"))
  (and (eq $infra.tls.issuer "external") $infra.tls.ca.cert )
}}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ace.fullname" . }}-setup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ace.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.setupJob.annotations }}
    {{- toYaml . | nindent 4}}
  {{- end}}
  {{- if .Values.setupJob.hook.enable }}
    helm.sh/hook: {{ .Values.setupJob.hook.hook | quote }}
    helm.sh/hook-weight: {{ .Values.setupJob.hook.hookWeight | quote }}
    helm.sh/hook-delete-policy: {{ .Values.setupJob.hook.hookDeletePolicy | quote }}
  {{- end}}
spec:
  backoffLimit: 4
  {{- if ge (int .Values.setupJob.ttlSecondsAfterFinished) 0 }}
  ttlSecondsAfterFinished: {{ .Values.setupJob.ttlSecondsAfterFinished }}
  {{- end }}
  template:
    {{- with .Values.podAnnotations }}
    metadata:
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
      {{- include "appscode.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "appscode.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "image.registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: Always
          args:
            - dev
            - --admin={{ .Values.global.platform.admin.username }}
            - --name={{ .Values.global.platform.admin.displayName }}
            - --password=$(ADMIN_PASSWORD)
            - --email={{ .Values.global.platform.admin.email }}
            - --exports
            - --reload-nats-accounts
            {{- if eq .Values.global.platform.deploymentType "Hosted" }}
            - --create-nats-stream
            {{- end }}
            - --importer-service-account={{ include "appscode.serviceAccountName" . }}-importer
            {{- if .Values.selfManagement.import }}
            - --self-import
            {{- if .Values.selfManagement.enableMonitoring }}
            - --enable-monitoring
            {{- end }}
            {{- if .Values.selfManagement.enableServiceBackend }}
            - --enable-service-backend
            {{- end }}
            {{- end }}
          # ports:
          #   - name: http
          #     containerPort: 3000
          #     protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ace.fullname" . }}-admin-auth
                  key: password
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "gcs") }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ $infra.objstore.mountPath }}/sa.json
          {{- end }}
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "s3") }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_SECRET_ACCESS_KEY
            {{- if $infra.objstore.s3.AWS_REGION }}
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_REGION
            {{- end }}
          {{- end }}
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "azure") }}
            - name: AZURE_STORAGE_ACCOUNT
              valueFrom:
                secretRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AZURE_ACCOUNT_NAME
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AZURE_ACCOUNT_KEY
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /data
            {{- if (include "settings.platformConfigSecretName" .) }}
            - name: config
              mountPath: /data/b3/conf/app.ini
              subPath: app.ini
            {{- end }}
            {{- if (include "settings.natsSecretName" .) }}
            - name: nats-cred
              mountPath: {{ .Values.settings.nats.mountPath }}
            {{- end }}
            {{- if (include "settings.objstoreSecretName" .) }}
            - name: objstore-cred
              mountPath: {{ $infra.objstore.mountPath }}
            {{- end }}
            {{- if $mountCACerts }}
            - name: cacerts
              mountPath: /etc/ssl/certs
            {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: data
          emptyDir: {}
        {{- with $secretName := (include "settings.platformConfigSecretName" .) }}
        - name: config
          secret:
            defaultMode: 420
            secretName: {{ $secretName }}
        {{- end }}
        {{- with $secretName := (include "settings.natsSecretName" .) }}
        - name: nats-cred
          secret:
            defaultMode: 420
            secretName: {{ $secretName }}
        {{- end }}
        {{- with $secretName := (include "settings.objstoreSecretName" .) }}
        - name: objstore-cred
          secret:
            defaultMode: 420
            secretName: {{ $secretName }}
        {{- end }}
        {{- if $mountCACerts }}
        - name: cacerts
          csi:
            driver: cacerts.csi.cert-manager.io
            readOnly: true
            volumeAttributes:
              os: debian
              caProviderClasses: {{ include "ace.fullname" . }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
