# Default values for service-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Docker registry fqdn used to pull app related images.
# Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
registryFQDN: ghcr.io

# Docker registry containing app images
image:
  # Docker registry used to pull app container image
  registry: appscode
  # App container image
  repository: service-provider
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

# Security options this container should run with
securityContext: # +doc-gen:break
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    # - host: chart-example.local
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

monitoring:
  # Name of monitoring agent (one of "prometheus.io", "prometheus.io/operator", "prometheus.io/builtin")
  agent: ""
  serviceMonitor:
    # Specify the labels for ServiceMonitor.
    # Prometheus crd will select ServiceMonitor using these labels.
    # Only usable when monitoring agent is `prometheus.io/operator`.
    labels: {}

server:
  oidc:
    # issuer client ID
    clientID: ""
    # issuer client Secret
    clientSecret: ""
    baseURL: "https://api.appscode.com/api"
    issuerURL: "https://accounts.appscode.com/accounts"
    callbackURL: "https://bind.appscode.com/bind/callback"
  # the sync namespace created in the provider side will be named like bb-<some-hash>
  namespacePrefix: "ace-"
  # How consumers access the service provider cluster. In Kubernetes, "namespaced" allows namespace isolation.
  # In kcp, "cluster" allows workspace isolation, and with that allows cluster-scoped resources to bind, and it is generally more performant.
  consumerScope: "Namespaced"

  cookie:
    # The key which is used to sign cookies, base64 encoded. Valid lengths are 32 or 64 bytes.
    signingKey: ""
    # The key which is used to encrypt cookies, base64 encoded, optional. Valid lengths are 16, 24, or 32 bytes selecting AES-128, AES-192, or AES-256.
    encryptionKey: ""
