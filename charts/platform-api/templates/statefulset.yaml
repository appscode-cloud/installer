{{ $infra := .Values.infra }}
{{- if .Values.global }}
{{- $infra = .Values.global.infra }}
{{- end }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "platform-api.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "platform-api.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  podManagementPolicy: "Parallel"
  serviceName: {{ include "platform-api.fullname" . }}-headless
  selector:
    matchLabels:
      {{- include "platform-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "platform-api.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "appscode.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "appscode.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "image.registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - api
            {{- if include "appscode.license" . }}
            - --license-file=/var/run/secrets/appscode/license/key.txt
            {{- end }}
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          startupProbe:
            httpGet:
              path: /api/v1/version
              port: http
            # wait for cert and nats to be ready
            initialDelaySeconds: 60
            failureThreshold: 18
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /api/v1/version
              port: http
          readinessProbe:
            httpGet:
              path: /api/v1/version
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: GCP_MARKETPLACE_SKIP_METERING_SERVICE
              value: {{ .Values.settings.skipGCPMarketplaceMeteringService | quote }}
          {{- with .Values.settings.secretName.gcpMarketplaceReportingSecret }}
            - name: GCP_MARKETPLACE_ENCODED_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: reporting-key
            - name: GCP_MARKETPLACE_CONSUMER_ID
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: consumer-id
          {{- end }}
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "gcs") }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: {{ $infra.objstore.mountPath }}/sa.json
          {{- end }}
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "s3") }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_SECRET_ACCESS_KEY
            {{- if $infra.objstore.s3.AWS_REGION }}
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AWS_REGION
            {{- end }}
          {{- end }}
          {{- if and (include "settings.objstoreSecretName" .) (eq $infra.objstore.provider "azure") }}
            - name: AZURE_STORAGE_ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AZURE_ACCOUNT_NAME
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "settings.objstoreSecretName" . }}
                  key: AZURE_ACCOUNT_KEY
          {{- end }}
            - name: B3_CONFIG_SECRET_NAME
              value: {{ include "settings.platformConfigSecretName" . }}
            - name: GEO_LOCATION_DB_PATH
              value: /data/b3/maxmind-geoip/GeoLite2-City.mmdb
          volumeMounts:
            - name: maxmind-mmdb
              mountPath: /data/b3/maxmind-geoip
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /data
            {{- if (include "settings.platformConfigSecretName" .) }}
            - name: config
              mountPath: /data/b3/conf/app.ini
              subPath: app.ini
            {{- end }}
            {{- if (include "settings.objstoreSecretName" .) }}
            - name: objstore-cred
              mountPath: {{ $infra.objstore.mountPath }}
            {{- end }}
            {{- if include "appscode.license" . }}
            - mountPath: /var/run/secrets/appscode/license
              name: license
            {{- end }}
            {{- if (include "settings.caProviderClass" .) }}
            - name: cacerts
              mountPath: /etc/ssl/certs
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      initContainers:
        - name: maxmind-mmdb
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "image.registry" . }}/{{ .Values.geoipdb.repository }}:{{ .Values.geoipdb.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.geoipdb.pullPolicy }}
          command: [ "sh", "-c", "cp /GeoLite2-City.mmdb /data/b3/maxmind-geoip/GeoLite2-City.mmdb" ]
          volumeMounts:
            - name: maxmind-mmdb
              mountPath: /data/b3/maxmind-geoip
      volumes:
        - name: maxmind-mmdb
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- with $secretName := (include "settings.platformConfigSecretName" .) }}
        - name: config
          secret:
            defaultMode: 420
            secretName: {{ $secretName }}
        {{- end }}
        {{- with $secretName := (include "settings.objstoreSecretName" .) }}
        - name: data
          emptyDir: {}
        - name: objstore-cred
          secret:
            defaultMode: 420
            secretName: {{ $secretName }}
        {{- else }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "platform-api.fullname" . }}-data
        {{- end }}
        {{- if include "appscode.license" . }}
        - name: license
          secret:
            defaultMode: 420
            secretName: {{ include "platform-api.fullname" . }}-license
        {{- end }}
        {{- with $cpc := (include "settings.caProviderClass" .) }}
        - name: cacerts
          csi:
            driver: cacerts.csi.cert-manager.io
            readOnly: true
            volumeAttributes:
              os: debian
              caProviderClasses: {{ $cpc }}
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
