{{- $major := default "0" .Capabilities.KubeVersion.Major | trimSuffix "+" | int64 }}
{{- $minor := default "0" .Capabilities.KubeVersion.Minor | trimSuffix "+" | int64 }}
{{- $criticalAddon := and .Values.criticalAddon (or (eq .Release.Namespace "kube-system") (and (ge $major 1) (ge $minor 17))) -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "s3proxy.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "s3proxy.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "s3proxy.fullname" . }}-pods
  selector:
    matchLabels:
      {{- include "s3proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "s3proxy.selectorLabels" . | nindent 8 }}
      {{- if $criticalAddon }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "appscode.imagePullSecrets" . | nindent 6 }}
      initContainers:
      - name: init
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ include "s3proxy.registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh", "-c", "mkdir -p /storage/backupbucket"]
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: storage
          mountPath: "/storage"
      containers:
      - name: s3proxy
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ include "s3proxy.registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 4224
        envFrom:
        - secretRef:
            name: {{ include "s3proxy.fullname" . }}
        {{- if .Values.s3proxy.tls.jksPasswordSecretRef.name }}
        env:
        - name: S3PROXY_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3proxy.tls.jksPasswordSecretRef.name }}
              key: {{ .Values.s3proxy.tls.jksPasswordSecretRef.key }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: storage
          mountPath: "/storage"
        {{- if .Values.s3proxy.tls.jksPasswordSecretRef.name }}
        - name: keystore
          mountPath: /opt/s3proxy/tls
        {{- end }}
      {{- if .Values.s3proxy.tls.jksPasswordSecretRef.name }}
      volumes:
      - name: keystore
        secret:
          secretName: {{ default (printf "%s-cert" (include "s3proxy.fullname" .)) .Values.s3proxy.tls.secret.name  }}
          items:
          - key: keystore.jks
            path: keystore.jks
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- if or .Values.tolerations $criticalAddon }}
      tolerations:
      {{- with .Values.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $criticalAddon }}
        - key: CriticalAddonsOnly
          operator: Exists
      {{- end -}}
    {{- end -}}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if $criticalAddon }}
      priorityClassName: system-cluster-critical
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- with .Values.storageClass.name }}
      storageClassName: {{ . }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
