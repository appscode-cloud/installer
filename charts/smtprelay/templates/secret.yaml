apiVersion: v1
kind: Secret
metadata:
  name: {{ include "smtprelay.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "smtprelay.labels" . | nindent 4 }}
type: Opaque
stringData:
  smtprelay.ini: |
    ; smtprelay configuration
    ;
    ; All config parameters can also be provided as environment
    ; variables in uppercase and the prefix "SMTPRELAY_".
    ; (eg. SMTPRELAY_LOGFILE, SMTPRELAY_LOG_FORMAT)

    ; Logfile (blank/default is stderr)
    ;logfile =

    ; Log format: default, plain (no timestamp), json
    ;log_format = default

    ; Log level: panic, fatal, error, warn, info, debug, trace
    ;log_level = info

    ; Hostname for this SMTP server
    ;hostname = localhost.localdomain

    ; Welcome message for clients
    ;welcome_msg = <hostname> ESMTP ready.

{{- if .Values.smtp.tls.enable }}
    {{- $addrs := dict "tls://[::1]:465" "" "starttls://[::1]:587" "" }}
    {{- range .Values.smtp.addresses }}
      {{ $_ := set $addrs . "" }}
    {{- end }}
    ; STARTTLS and TLS are also supported but need a
    ; SSL certificate and key.
    listen = {{ keys $addrs | sortAlpha | join " " }}
    local_cert = /etc/smtprelay/pki/tls.crt
    local_key  = /etc/smtprelay/pki/tls.key
{{- else }}
    ; Listen on the following addresses for incoming
    ; unencrypted connections.
    listen = {{ join " " .Values.smtp.addresses }}
{{- end }}

    ; Enforce encrypted connection on STARTTLS ports before
    ; accepting mails from client.
    ;local_forcetls = false

    ; Socket timeout for read operations
    ; Duration string as sequence of decimal numbers,
    ; each with optional fraction and a unit suffix.
    ; Valid time units are "ns", "us", "ms", "s", "m", "h".
    ;read_timeout = 60s

    ; Socket timeout for write operations
    ; Duration string as sequence of decimal numbers,
    ; each with optional fraction and a unit suffix.
    ; Valid time units are "ns", "us", "ms", "s", "m", "h".
    ;write_timeout = 60s

    ; Socket timeout for DATA command
    ; Duration string as sequence of decimal numbers,
    ; each with optional fraction and a unit suffix.
    ; Valid time units are "ns", "us", "ms", "s", "m", "h".
    ;data_timeout = 5m

    ; Max concurrent connections, use -1 to disable
    ;max_connections = 100

    ; Max message size in bytes
    ;max_message_size = 10240000

    ; Max RCPT TO calls for each envelope
    ;max_recipients = 100

    ; Networks that are allowed to send mails to us
    ; Defaults to localhost. If set to "", then any address is allowed.
    ;allowed_nets = 127.0.0.0/8 ::1/128

    ; Regular expression for valid FROM EMail addresses
    ; If set to "", then any sender is permitted.
    ; Example: ^(.*)@localhost.localdomain$
    ;allowed_sender =

    ; Regular expression for valid TO EMail addresses
    ; If set to "", then any recipient is permitted.
    ; Example: ^(.*)@localhost.localdomain$
    ;allowed_recipients =

    ; File which contains username and password used for
    ; authentication before they can send mail.
    ; File format: username bcrypt-hash [email[,email[,...]]]
    ;   username: The SMTP auth username
    ;   bcrypt-hash: The bcrypt hash of the pasword (generate with "./hasher password")
    ;   email: Comma-separated list of allowed "from" addresses:
    ;          - If omitted, user can send from any address
    ;          - If @domain.com is given, user can send from any address @domain.com
    ;          - Otherwise, email address must match exactly (case-insensitive)
    ;          E.g. "app@example.com,@appsrv.example.com"
    ;allowed_users = users.txt

{{- if .Values.smtp.auth.domain }}
    ; HTTP endpoint to check user authentication
    ; If both auth_endpoint and allowed_users are provided,
    ; only auth_endpoint is used for authentication
    auth_endpoint = https://{{ .Values.smtp.auth.domain }}/api/v1/ace-installer/installer-meta
{{- end }}

    ; Relay all mails to this SMTP servers.
    ; If not set, mails are discarded.
    ;
    ; Format:
    ;   protocol://[user[:password]@][netloc][:port][/remote_sender][?param1=value1&...]
    ;
    ;   protocol: smtp (unencrypted), smtps (TLS), starttls (STARTTLS)
    ;   user: Username for authentication
    ;   password: Password for authentication
    ;   remote_sender: Email address to use as FROM
    ;   params:
    ;     skipVerify: "true" or empty to prevent ssl verification of remote server's certificate
    ;     auth: "login" to use LOGIN authentication
    remotes = {{ join " " .Values.smtp.remotes }}

    ; Pipe messages to external command
    ;command = /usr/local/bin/script
