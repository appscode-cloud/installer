{{- if not (eq .Values.infra.dns.provider "external") }}

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: {{ include "service-presets.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "service-presets.labels" . | nindent 4 }}
spec:
  {{- if eq .Values.infra.tls.issuer "ca" }}
  {{- if and .Values.infra.tls.ca.cert .Values.infra.tls.ca.key }}
  ca:
    secretName: {{ include "service-presets.fullname" . }}-ca
  {{- else }}
  selfSigned: {}
  {{- end }}
  {{- end }}
  {{- if has .Values.infra.tls.issuer (list "letsencrypt" "letsencrypt-staging") }}
  acme:
    {{- if (eq .Values.infra.tls.issuer "letsencrypt") }}
    server: https://acme-v02.api.letsencrypt.org/directory
    {{- end }}
    {{- if (eq .Values.infra.tls.issuer "letsencrypt-staging") }}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    {{- end }}
    email: {{ .Values.infra.tls.acme.email }}
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: {{ include "service-presets.fullname" . }}-acme-cred
    # ACME DNS-01 provider configurations
    solvers:
    # An empty 'selector' means that this solver matches all domains
    - selector: {}
      dns01:
      {{- if eq .Values.infra.dns.provider "cloudflare" }}
      {{- if .Values.infra.dns.auth.cloudflare.baseURL }}
        webhook:
          solverName: "ace"
          groupName: webhook.dns.appscode.com
          config:
            baseURL: '{{ .Values.infra.dns.auth.cloudflare.baseURL }}'
            apiToken:
              name: {{ include "service-presets.fullname" . }}-dns-cred
              key: CF_API_TOKEN
      {{- else }}
        cloudflare:
          apiTokenSecretRef:
            name: {{ include "service-presets.fullname" . }}-dns-cred
            key: CF_API_TOKEN
      {{- end }}
      {{- end }}
      {{- if eq .Values.infra.dns.provider "cloudDNS" }}
        cloudDNS:
          project: {{ .Values.infra.dns.auth.cloudDNS.GOOGLE_PROJECT_ID }}
          serviceAccountSecretRef:
            name: {{ include "service-presets.fullname" . }}-dns-cred
            key: GOOGLE_SERVICE_ACCOUNT_JSON_KEY
      {{- end }}
      {{- if eq .Values.infra.dns.provider "route53" }}
        route53:
          accessKeyID: {{ .Values.infra.dns.auth.route53.AWS_ACCESS_KEY_ID }}
          region: {{ .Values.infra.dns.auth.route53.AWS_REGION }}
          secretAccessKeySecretRef:
            name: {{ include "service-presets.fullname" . }}-dns-cred
            key: AWS_SECRET_ACCESS_KEY
      {{- end }}
      {{- if eq .Values.infra.dns.provider "azureDNS" }}
        azureDNS:
          clientID: {{ .Values.infra.dns.auth.azureDNS.servicePrincipalAppID }}
          clientSecretSecretRef:
            name: {{ include "service-presets.fullname" . }}-dns-cred
            key: SERVICE_PRINCIPAL_PASSWORD
          subscriptionID: {{ .Values.infra.dns.auth.azureDNS.subscriptionID }}
          tenantID: {{ .Values.infra.dns.auth.azureDNS.tenantID }}
          resourceGroupName: {{ .Values.infra.dns.auth.azureDNS.resourceGroupName }}
          hostedZoneName: {{ .Values.infra.dns.auth.azureDNS.hostedZoneName }}
          environment: {{ default "AzurePublicCloud" .Values.infra.dns.auth.azureDNS.environment }}
      {{- end }}
  {{- end }}
{{- end }}
